"1. How did you handle inline editing in the table?
In this project, I handled inline editing by using a combination of state management and event handlers. When a user clicks on the 'Edit' button for a task in the table, the corresponding taskâ€™s information is loaded into the editable form fields. The user can update the title, description, and status of the task directly within the form. After editing, I used an event handler to update the task in the state by finding the task in the state array and replacing it with the updated task. A toast notification is shown to inform the user that the task has been successfully updated.

2. Explain how you fetched and processed the data from the dummy API.
I fetched the data from a dummy API (https://jsonplaceholder.typicode.com/todos) using 'axios' within the 'useEffect' hook to ensure that the data is fetched when the component mounts. The data fetched from the API is in the form of an array of objects, each representing a task with a 'title' and 'completed' field. After receiving the data, I processed it by slicing the array to limit the number of tasks and added a 'status' field to each task based on the 'completed' field. If the 'completed' value is 'true', the status is set to 'Done'; otherwise, it is set to 'To Do'. This processed data is then stored in the state using 'setTasks'.

3. What approach did you use to filter tasks based on status?
I used a controlled 'Select' dropdown ('FilterDropdown') component to allow users to filter tasks based on their status. The component maintains a 'filter' state that holds the selected status value (e.g., 'To Do', 'In Progress', 'Done'). When the user selects a status from the dropdown, the 'filter' state is updated. I then used this filter state to filter the tasks in the main component. The filtering logic checks if the task's 'status' matches the selected filter. If no filter is selected, all tasks are displayed. Additionally, I also applied a search functionality that filters tasks based on the title or description.

4. How did you manage the state of tasks when adding or editing them?
I managed the state of tasks using the React 'useState' hook. The state variable 'tasks' holds an array of all tasks, while the 'setTasks' function is used to update this state. When adding a new task, I update the state by appending the new task object to the existing 'tasks' array. I dynamically assign an ID to the new task by setting it to the length of the current tasks array plus one. For editing a task, I find the task to be edited in the 'tasks' array, update its properties, and then update the state with the new task array. Whenever a task is added or edited, I trigger a toast notification to notify the user of the successful operation.

5. What challenges did you face during development, and how did you overcome them?
One challenge I faced during development was ensuring that the tasks were dynamically updated without losing their existing order or data when a task was deleted. To overcome this, I re-numbered the tasks after deletion to maintain a sequential order of task IDs. Another challenge was dealing with state management when handling task updates, especially when multiple tasks could be edited. I overcame this by making sure that only the specific task being edited was updated in the state, and I used a key ('id') to ensure that updates were correctly applied to the right task. Lastly, integrating the search and filter functionality was initially tricky, but I solved it by applying filtering logic on both the task status and search input to provide a seamless user experience." > answers.txt
